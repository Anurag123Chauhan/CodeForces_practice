#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

#define ll long long
const int MOD = 1e9 + 7;
const int LIM = 1000000; // Make sure this limit is sufficient for the problem

// Defining the ordered_set
template <class T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define ff first
#define ss second
#define all(x) (x).begin(), (x).end()
#define py cout << "YES" << "\n"
#define pn cout << "NO" << "\n"
#define loop(x, b) for (int x = 0; x < b; x++)
#define pb push_back

// Debugging helper function
#define debug(x)       \
    cerr << #x << " "; \
    _print(x);         \
    cerr << "\n";

// function overriding for _print(x)
void _print(ll t) { cerr << t; }
void _print(int t) { cerr << t; }
void _print(string t) { cerr << t; }
void _print(char t) { cerr << t; }
void _print(double t) { cerr << t; }

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);

// Template functions to print containers
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << "{";
    _print(p.ff);
    cerr << ",";
    _print(p.ss);
    cerr << "}";
}
template <class T>
void _print(vector<T> v)
{
    cerr << "[ ";
    for (T i : v)
    {
        _print(i);
        cerr << " ";
    }
    cerr << "]";
}
template <class T>
void _print(set<T> v)
{
    cerr << "[ ";
    for (T i : v)
    {
        _print(i);
        cerr << " ";
    }
    cerr << "]";
}
template <class T>
void _print(multiset<T> v)
{
    cerr << "[ ";
    for (T i : v)
    {
        _print(i);
        cerr << " ";
    }
    cerr << "]";
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << "[ ";
    for (auto i : v)
    {
        _print(i);
        cerr << " ";
    }
    cerr << "]";
}
// powerMOD
ll powermod(ll x, ll y)
{
    ll res = 1;
    x = x % MOD;
    if (x == 0)
        return 0;
    while (y > 0)
    {
        if (y & 1)
            res = (res * x) % MOD;
        y = y >> 1;
        x = (x * x) % MOD;
    }
    return res;
}
// Helper functions for modular arithmetic
int mul(int a, int b)
{
    return (1LL * a * b) % MOD;
}
int add(int a, int b)
{
    int s = (a + b);
    if (s >= MOD)
        s -= MOD;
    return s;
}
int sub(int a, int b)
{
    int s = (a + MOD - b);
    if (s >= MOD)
        s -= MOD;
    return s;
}
int po(int a, ll deg)
{
    if (deg == 0)
        return 1;
    if (deg % 2 == 1)
        return mul(a, po(a, deg - 1));
    int t = po(a, deg / 2);
    return mul(t, t);
}
int inv(int n)
{
    return po(n, MOD - 2);
}

//******for factorials and inverses of MOD
//******just use like facs[n] and invfacs[n]
vector<int> facs(LIM), invfacs(LIM), invs(LIM);

void init()
{
    facs[0] = 1;
    for (int i = 1; i < LIM; i++)
        facs[i] = mul(facs[i - 1], i);
    invfacs[LIM - 1] = inv(facs[LIM - 1]);
    for (int i = LIM - 2; i >= 0; i--)
        invfacs[i] = mul(invfacs[i + 1], i + 1);
    for (int i = 1; i < LIM; i++)
        invs[i] = mul(invfacs[i], facs[i - 1]);
}

// use it like this mod_int x = 5
// it will automatically take mod with MOD
template <const int &MOD>
struct _m_int
{
    int val;

    _m_int(int64_t v = 0)
    {
        if (v < 0)
            v = v % MOD + MOD;
        if (v >= MOD)
            v %= MOD;
        val = int(v);
    }

    explicit operator int() const { return val; }

    _m_int &operator+=(const _m_int &other)
    {
        val += other.val;
        if (val >= MOD)
            val -= MOD;
        return *this;
    }

    _m_int &operator-=(const _m_int &other)
    {
        val -= other.val;
        if (val < 0)
            val += MOD;
        return *this;
    }

    _m_int &operator*=(const _m_int &other)
    {
        val = (val * 1LL * other.val) % MOD;
        return *this;
    }

    _m_int &operator/=(const _m_int &other)
    {
        return *this *= other.inv();
    }

    friend _m_int operator+(const _m_int &a, const _m_int &b) { return _m_int(a) += b; }
    friend _m_int operator-(const _m_int &a, const _m_int &b) { return _m_int(a) -= b; }
    friend _m_int operator*(const _m_int &a, const _m_int &b) { return _m_int(a) *= b; }
    friend _m_int operator/(const _m_int &a, const _m_int &b) { return _m_int(a) /= b; }

    _m_int inv() const
    {
        int x, y;
        int gcd = extended_gcd(val, MOD, x, y);
        assert(gcd == 1);
        return _m_int(x);
    }

    static int extended_gcd(int a, int b, int &x, int &y)
    {
        if (a == 0)
        {
            x = 0;
            y = 1;
            return b;
        }
        int x1, y1;
        int d = extended_gcd(b % a, a, x1, y1);
        x = y1 - (b / a) * x1;
        y = x1;
        return d;
    }

    friend ostream &operator<<(ostream &os, const _m_int &m)
    {
        return os << m.val;
    }
};
using mod_int = _m_int<MOD>;

// ceil_div function
ll ceil_div(ll a, ll b)
{
    return a / b + ((a ^ b) > 0 && a % b != 0);
}
ll gcd(ll a, ll b)
{
    if (b == 0)
        return a;

    return gcd(b, a % b);
}

// Function to return LCM of
// two numbers
ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }
// sum of first k natural numbers
ll sum_of_first_k(ll k)
{
    return k * (k + 1) / 2;
}
// sparse table
// const int LOG = 17;
// int a[MAXN];
// int m[MAXN][LOG]; // m[i][j] is the minimum of a[i..i+2^j-1]

// int query(int l,int r){
//     int len = r-l+1;
//     int k = 31-__builtin_clz(len);
//     return min(m[l][k],m[r-(1<<k)+1][k]);
// }
// void solve() {
//     int n;
//     cin>>n;
//     //reading input
//     for(int i=0;i<n;i++){
//         cin>>a[i];
//         m[i][0] = a[i];
//     }
//     //pre-processing O(NlogN)
//     for(int k = 1;k<LOG;k++){
//         for(int i=0;i+(1<<k)-1<n;i++){
//             m[i][k] = min(m[i][k-1],m[i+(1<<(k-1))][k-1]);
//         }
//     }
//     int q;
//     cin>>q;
//     for(int i=0;i<q;i++){
//         int l,r;
//         cin>>l>>r;
//         cout<<query(l,r)<<"\n";
//     }
// }
/*   /\_/\
 *   (= ._.)
 *   / >  \> à¶ž
 */
//  Question dhang se pad le bsdk :)

void solve(){
    ll n;
    cin>>n;
    vector<ll>cities(n);
    loop(i,n)cin>>cities[i];
    vector<ll>left(n,0),right(n,0);
    auto rightcheck = [&](ll i){
        if(i==0){
            return 1ll;
        }
        else{
            ll ri = cities[i+1]-cities[i];
            ll le = cities[i]-cities[i-1];
            if(ri<le){
                return 1ll;
            }
            else{
                return ri;
            }
        }
    };
    auto leftcheck = [&](ll i){
        if(i==n-1){
            return 1ll;
        }
        else{
            ll ri = cities[i+1]-cities[i];
            ll le = cities[i]-cities[i-1];
            if(le<ri){
                return 1ll;
            }
            else{
                return le;
            }
        }
    };
    //filling right 
    for(int i=1;i<n;i++){
        right[i] = right[i-1]+rightcheck(i-1);
    }
    //filling left
    for(int i=n-2;i>=0;i--){
        left[i] = left[i+1]+leftcheck(i+1);
    }
    ll m;
    cin>>m;
    for(int i=0;i<m;i++){
        ll l,r;
        cin>>l>>r;
        l--,r--;
        if(l<r){
            cout<<right[r]-right[l]<<"\n";
        }
        else{
            cout<<left[r]-left[l]<<"\n";
        }
    }
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    // call init function to precompute factorials and inverses
    // init();
    ll t = 1;
    cin >> t;
    while (t--)
    {
        solve();
    }
    return 0;
}
